{"version":3,"sources":["src/resources/index.ts","src/open-id-configuration.ts","src/main.ts","src/environment.ts","src/app.ts","C:/tfstest/systemjs/Client/src/app.html","C:/tfstest/systemjs/Client/src/app.css"],"names":[],"mappings":";;;IAEA,SAAgB,SAAS,CAAC,MAA8B;IAExD,CAAC;IAFD,8BAEC;;;;;;;;ICDD,IAAM,OAAO,GAAG,uBAAuB,CAAC;IAExC,kBAAe;QACb,kBAAkB,EAAE,UAAU;QAC9B,mBAAmB,EAAE,QAAQ;QAC7B,yBAAyB,EAAE,QAAQ;QACnC,mBAAmB,EAAE;YAInB,mCAAmC,EAAE,CAAC;YAItC,SAAS,EAAE,4BAA4B;YAEvC,oBAAoB,EAAE,IAAI;YAI1B,cAAc,EAAE,IAAI;YACpB,oBAAoB,EAAE,IAAI;YAG1B,SAAS,EAAE,gBAAgB;YAE3B,oBAAoB,EAAE,IAAI;YAC1B,YAAY,EAAE,KAAK;YACnB,wBAAwB,EAAK,OAAO,kBAAe;YACnD,YAAY,EAAK,OAAO,iBAAc;YACtC,aAAa,EAAE,UAAU;YACzB,KAAK,EAAE,YAAY;YAGnB,oBAAoB,EAAE,KAAK;YAC3B,mBAAmB,EAAK,OAAO,iBAAc;YAC7C,SAAS,EAAE,IAAI,kCAAoB,CAAC;gBAClC,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,MAAM,CAAC,YAAY;aAC3B,CAAC;SACoB;KACK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICrChC,SAAsB,SAAS,CAAC,OAAgB;;;gBAE9C,OAAO,CAAC,GAAG;qBACR,qBAAqB,EAAE;qBACvB,OAAO,CAAC,WAAW,CAAC,CAAC;gBAExB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,yBAAyB,EAAE,cAAM,OAAA,+BAAmB,EAAnB,CAAmB,CAAC,CAAC;gBAEzE,IAAI,qBAAW,CAAC,KAAK,EACrB;oBACE,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;iBAClC;gBAED,IAAI,qBAAW,CAAC,OAAO,EACvB;oBACE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;iBACvC;gBAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;;;;KAC/C;IAnBD,8BAmBC;;;;;;;;IC1BD,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;;;;;;;;;;;;ICKF;QAKE;QAIA,CAAC;QATU,GAAG;YADf,8BAAU;;WACE,GAAG,CAgCf;QAAD,UAAC;KAhCD,AAgCC,IAAA;IAhCY,kBAAG;;;;;ACRhB;ACAA","file":"app-bundle.js","sourcesContent":["import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import { OpenIdConnectConfiguration } from \"aurelia-open-id-connect\";\r\nimport { UserManagerSettings, WebStorageStateStore } from \"oidc-client\";\r\n\nconst appHost = \"http://localhost:9000\";\n\nexport default {\n  loginRedirectRoute: \"/private\",\n  logoutRedirectRoute: \"/index\",\n  unauthorizedRedirectRoute: \"/index\",\n  userManagerSettings: {\n\n    // The number of seconds in advance of access token expiry\n    // to raise the access token expiring event.\n    accessTokenExpiringNotificationTime: 1,\n\n    // Either host your own OpenID Provider or select a certified authority\n    // from the list http://openid.net/certification/\n    authority: \"http://localhost/Identity/\",\n\n    automaticSilentRenew: true,\n\n    // IdentityServer4 supports OpenID Connect Session Management\n    // https://openid.net/specs/openid-connect-session-1_0.html\n    monitorSession: true,\n    checkSessionInterval: 2000,\n\n    // The client or application ID that the authority issues.\n    client_id: \"CustomerClient\",\n\n    filterProtocolClaims: true,\n    loadUserInfo: false,\n    post_logout_redirect_uri: `${appHost}/signout-oidc`,\n    redirect_uri: `${appHost}/signin-oidc`,\n    response_type: \"id_token\",\n    scope: \"openid api\",\n    // number of millisecods to wait for the authorization\n    // server to response to silent renew request\n    silentRequestTimeout: 10000,\n    silent_redirect_uri: `${appHost}/signin-oidc`,\n    userStore: new WebStorageStateStore({\n      prefix: \"oidc\",\n      store: window.localStorage,\n    }),\n  } as UserManagerSettings,\n} as OpenIdConnectConfiguration;\n","import { Aurelia } from 'aurelia-framework';\r\nimport environment from './environment';\r\n//import 'bootstrap';\r\n\r\nimport  openIdConfiguration  from './open-id-configuration';\r\n\n\r\nexport async function configure(aurelia: Aurelia)\r\n{  \n  aurelia.use\r\n    .standardConfiguration()\r\n    .feature('resources');\r\n\n  aurelia.use.plugin('aurelia-open-id-connect', () => openIdConfiguration);\n\r\n  if (environment.debug)\r\n  {\r\n    aurelia.use.developmentLogging();\r\n  }\r\n\r\n  if (environment.testing)\r\n  {\r\n    aurelia.use.plugin('aurelia-testing');\r\n  }\r\n\r\n  aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n","\r\nimport { autoinject } from 'aurelia-framework';\r\nimport { Router, RouterConfiguration } from 'aurelia-router';\r\n\r\nimport { OpenIdConnect, OpenIdConnectRoles } from 'aurelia-open-id-connect';\r\nimport { User } from 'oidc-client';\r\n\n@autoinject\nexport class App { \n\n  private router: Router;\n  //private user: User;\n\n  constructor(\n/*    private openIdConnect: OpenIdConnect*/) {\n     \n   // this.openIdConnect.observeUser((user: User) => this.user = user);\n  }\n\n  //public configureRouter(config: RouterConfiguration, router: Router): void {\n  //  config.title = \"\";\n  //  config.options.root = './';\n\n  //  config.map([\n  //    {\n  //      route: ['', 'account'],        \n  //      name: 'account',\n  //      moduleId: 'shared/components/account/account-component',\n  //      title: 'account',\n  //      auth: true,\n  //      settings: {\n  //        roles: [OpenIdConnectRoles.Authenticated],\n  //      }\r\n  //    },\n\n  //  ]);\n\n  //  //this.openIdConnect.configure(config);\n  //  this.router = router;\n  //}\n}\n",null,null],"sourceRoot":".."}